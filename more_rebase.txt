[Master]
https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase
The primary reason for rebasing is to maintain a linear project history. 
For example, consider a situation where the master branch has progressed since you started working on a feature branch. 
You want to get the latest updates to the master branch in your feature branch, but you want to keep your branch's history clean 
so it appears as if you've been working off the latest master branch.

[Dev]
You have two options for integrating your feature into the master branch: merging directly or rebasing and then merging. 
The former option results in a 3-way merge and a merge commit, while the latter results in a fast-forward merge and a perfectly linear history.
Rebasing is a common way to integrate upstream changes into your local repository. Pulling in upstream changes with Git merge results in a superfluous merge commit every time you want to see how the project has progressed. 
On the other hand, rebasing is like saying, “I want to base my changes on what everybody has already done.”

[Master]
Making some non-conflicing changes, adding these lines after the lines from dev (currently blank on master)
Dev won't have this change yet, will try rebasing after checking out.

[Dev]
Ok, executed `git rebase master` and used command `git log --graph --oneline --all` to draw the tree before and after.
Before, there was a branch in the tree with the commit "Add para from dev". Then after rebasing, the tree became linear
with that commit directly in front of master's latest commit.
